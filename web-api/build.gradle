plugins {
    id 'kotlin'
    id 'com.github.johnrengelman.shadow'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "io.vertx:vertx-core:$vertx_version"
    compile "io.vertx:vertx-web:$vertx_version"
    compile "com.google.inject:guice:$guice_version"
    compile "mysql:mysql-connector-java:$mysql_connector_version"
    compile "org.jdbi:jdbi3-kotlin:$jdbi3_version"
    compile "org.jdbi:jdbi3-kotlin-sqlobject:$jdbi3_version"
    compile "com.zaxxer:HikariCP:$hikari_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    compile "org.apache.logging.log4j:log4j-api:$log4j_version"
    compile "org.apache.logging.log4j:log4j-core:$log4j_version"
    compile "org.apache.logging.log4j:log4j-slf4j18-impl:$log4j_version"
    compile "redis.clients:jedis:$jedis_version"
    compile "com.lambdaworks:scrypt:$wg_scrypt_version"
    compile "org.hibernate.validator:hibernate-validator:$hibernate_validator_version"
    compile "org.glassfish:javax.el:$javax_el_version"      //hibernate validator depends on this
    compile "io.jsonwebtoken:jjwt-api:$jjwt_version"
    runtime "io.jsonwebtoken:jjwt-impl:$jjwt_version"
    runtime "io.jsonwebtoken:jjwt-jackson:$jjwt_version"

    testImplementation "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "io.rest-assured:rest-assured:$rest_assured"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
    if (System.properties['test.profile'] != 'integration') {
        exclude '**/*IntegrationTest*'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jar {
    manifest {
        attributes('Main-Class': 'io.samuelagesilas.nbafinals.NBAFinalsApiServerKt')
    }
}

shadowJar {
    version = '0.9-SNAPSHOT'
    artifacts {
        shadow(tasks.shadowJar.archivePath) {
            builtBy shadowJar
        }
    }
}